#include <stdlib.h>
#include <stdio.h>

unsigned short basetable[512] = {
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
	0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,
	0x0002,0x0004,0x0008,0x0010,0x0020,0x0040,0x0080,0x0100,
	0x0200,0x0400,0x0800,0x0c00,0x1000,0x1400,0x1800,0x1c00,
	0x2000,0x2400,0x2800,0x2c00,0x3000,0x3400,0x3800,0x3c00,
	0x4000,0x4400,0x4800,0x4c00,0x5000,0x5400,0x5800,0x5c00,
	0x6000,0x6400,0x6800,0x6c00,0x7000,0x7400,0x7800,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,0x7c00,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,
	0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8000,0x8001,
	0x8002,0x8004,0x8008,0x8010,0x8020,0x8040,0x8080,0x8100,
	0x8200,0x8400,0x8800,0x8c00,0x9000,0x9400,0x9800,0x9c00,
	0xa000,0xa400,0xa800,0xac00,0xb000,0xb400,0xb800,0xbc00,
	0xc000,0xc400,0xc800,0xcc00,0xd000,0xd400,0xd800,0xdc00,
	0xe000,0xe400,0xe800,0xec00,0xf000,0xf400,0xf800,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
	0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,0xfc00,
};

unsigned short shifttable[512] = {
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x017,
	0x016,0x015,0x014,0x013,0x012,0x011,0x010,0x00f,
	0x00e,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,
	0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,
	0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,
	0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x00d,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x017,
	0x016,0x015,0x014,0x013,0x012,0x011,0x010,0x00f,
	0x00e,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,
	0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,
	0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,
	0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x00d,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x018,
	0x018,0x018,0x018,0x018,0x018,0x018,0x018,0x00d,
};

/*
	This is taken from original EXR library.
*/
short halfconvert (int i)
{
	//
	// Our floating point number, f, is represented by the bit
	// pattern in integer i.  Disassemble that bit pattern into
	// the sign, s, the exponent, e, and the significand, m.
	// Shift s into the position where it will go in in the
	// resulting half number.
	// Adjust e, accounting for the different exponent bias
	// of float and half (127 versus 15).
	//

	int s =  (i >> 16) & 0x00008000;
	int e = ((i >> 23) & 0x000000ff) - (127 - 15);
	int m =   i        & 0x007fffff;

	//
	// Now reassemble s, e and m into a half:
	//

	if (e <= 0)
	{
		if (e < -10)
		{
			//
			// E is less than -10.  The absolute value of f is
			// less than HALF_MIN (f may be a small normalized
			// float, a denormalized float or a zero).
			//
			// We convert f to a half zero with the same sign as f.
			//

			return s;
		}

		//
		// E is between -10 and 0.  F is a normalized float
		// whose magnitude is less than HALF_NRM_MIN.
		//
		// We convert f to a denormalized half.
		//

		//
		// Add an explicit leading 1 to the significand.
		// 

		m = m | 0x00800000;

		//
		// Round to m to the nearest (10+e)-bit value (with e between
		// -10 and 0); in case of a tie, round to the nearest even value.
		//
		// Rounding may cause the significand to overflow and make
		// our number normalized.  Because of the way a half's bits
		// are laid out, we don't have to treat this case separately;
		// the code below will handle it correctly.
		// 

		int t = 14 - e;
		int a = (1 << (t - 1)) - 1;
		int b = (m >> t) & 1;

		m = (m + a + b) >> t;

		//
		// Assemble the half from s, e (zero) and m.
		//

		return s | m;
	}
	else if (e == 0xff - (127 - 15))
	{
		if (m == 0)
		{
			//
			// F is an infinity; convert f to a half
			// infinity with the same sign as f.
			//

			return s | 0x7c00;
		}
		else
		{
			//
			// F is a NAN; we produce a half NAN that preserves
			// the sign bit and the 10 leftmost bits of the
			// significand of f, with one exception: If the 10
			// leftmost bits are all zero, the NAN would turn 
			// into an infinity, so we have to set at least one
			// bit in the significand.
			//

			m >>= 13;
			return s | 0x7c00 | m | (m == 0);
		}
	}
	else
	{
		//
		// E is greater than zero.  F is a normalized float.
		// We try to convert f to a normalized half.
		//

		//
		// Round to m to the nearest 10-bit value.  In case of
		// a tie, round to the nearest even value.
		//

		m = m + 0x00000fff + ((m >> 13) & 1);

		if (m & 0x00800000)
		{
			m =  0;		// overflow in significand,
			e += 1;		// adjust exponent
		}

		//
		// Handle exponent overflow
		//

		if (e > 30)
		{
			return s | 0x7c00;	// if this returns, the half becomes an
		}   			// infinity with the same sign as f.

		//
		// Assemble the half from s, e and m.
		//

		return s | (e << 10) | (m >> 13);
	}
}

short half_convert( int f )
{
	return basetable[(f>>23)&0x1ff]+((f&0x007fffff)>>shifttable[(f>>23)&0x1ff]);
}

int main()
{
	for( unsigned i=0; i<4000; i++ )
	{
		float r = float(i);
		int *r_ptr = (int *) &r;
		int r_int = *r_ptr;	

		printf( "%f %x %x\n", r,
			halfconvert(r_int), half_convert(r_int) );
	}

	for( unsigned i=0; i<100; i++ )
	{
		float r = float(rand()) / float(RAND_MAX); 		
		int *r_ptr = (int *) &r;
		int r_int = *r_ptr;	

		printf( "%f %x %x\n", r,
			halfconvert(r_int), half_convert(r_int) );
	}

	return 0;
}
